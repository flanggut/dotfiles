if-shell "uname | grep -q Darwin" "set-option -g default-shell /Users/flanggut/homebrew/bin/fish" "set-option -g default-shell /bin/fish"
set-option -g prefix2 C-z
set -g mode-keys vi
set -g mouse on
set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on
set -g history-limit 10000                # boost history
set -sg escape-time 0                     # because VIM
set -g default-terminal "xterm-256color" # all the colors
set-option -ga terminal-overrides ",xterm-256color:Tc"

# -- display -------------------------------------------------------------------
set -g @catppuccin_flavour 'frappe' # latte, frappe, macchiato, mocha
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W"

set -g @catppuccin_status_modules_right "directory user host session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator ""
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"

set -g @catppuccin_directory_text "#{pane_current_path}"

if-shell "uname | grep -q Darwin" {
  set-option -g set-titles-string "   #S:#I:#W ❯   #T"
  } {
  set-option -g set-titles-string "   #S:#I:#W ❯   #T"
  }

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 10     # redraw status line every 10 seconds

# activity
# set -g monitor-activity on
# set -g visual-activity off

# status
# set -g status-bg colour0
# set -g status-fg colour7
# set -g status-left ' '
# set -g status-right ''
# setw -g window-status-current-format '#[underscore,bold]#I #W#[nounderscore,nobold] '
# setw -g window-status-format ' #I #W '
# setw -g window-status-activity-style default
# setw -g window-status-bell-style default

# -- navigation ----------------------------------------------------------------
# rerun last command on other split
bind -r C-p send -t -1 C-p Enter
bind-key -n 'M-;' send -t -1 C-p Enter

# pane navigation
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
#bind-key -n 'M-,' if-shell "$is_vim" 'send-keys M-,'  'split-window -v -c "#{pane_current_path}"'
bind-key -n 'M-.' if-shell "$is_vim" 'send-keys M-.'  'split-window -h -c "#{pane_current_path}"'

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one
bind f break-pane         # maximize current pane
bind-key g join-pane -h -t :1 
bind-key s 'split-window -h -c "#{pane_current_path}"'
bind-key -n 'M-,' next-window
bind-key -n 'M-m' previous-window
bind-key -n 'M-n' new-window

# -- copy mode -----------------------------------------------------------------
bind Enter copy-mode # enter copy mode
bind k copy-mode # enter copy mode
run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line j> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# reload configuration
bind C-r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'
bind C-l source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# -- plugins -------------------------------------------------------------------
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tpm'

# --- always at end of file: init tpm
run '~/.tmux/plugins/tpm/tpm'
